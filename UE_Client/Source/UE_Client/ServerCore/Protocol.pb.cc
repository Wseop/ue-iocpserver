// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR C_Enter::C_Enter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enter_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EnterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EnterDefaultTypeInternal() {}
  union {
    C_Enter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EnterDefaultTypeInternal _C_Enter_default_instance_;
PROTOBUF_CONSTEXPR S_Enter::S_Enter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.enter_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EnterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EnterDefaultTypeInternal() {}
  union {
    S_Enter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EnterDefaultTypeInternal _S_Enter_default_instance_;
PROTOBUF_CONSTEXPR C_Exit::C_Exit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enter_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ExitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ExitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ExitDefaultTypeInternal() {}
  union {
    C_Exit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ExitDefaultTypeInternal _C_Exit_default_instance_;
PROTOBUF_CONSTEXPR S_Exit::S_Exit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.enter_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ExitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ExitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ExitDefaultTypeInternal() {}
  union {
    S_Exit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ExitDefaultTypeInternal _S_Exit_default_instance_;
PROTOBUF_CONSTEXPR S_Spawn::S_Spawn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SpawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SpawnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SpawnDefaultTypeInternal() {}
  union {
    S_Spawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SpawnDefaultTypeInternal _S_Spawn_default_instance_;
PROTOBUF_CONSTEXPR S_Despawn::S_Despawn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_ids_)*/{}
  , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DespawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DespawnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DespawnDefaultTypeInternal() {}
  union {
    S_Despawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DespawnDefaultTypeInternal _S_Despawn_default_instance_;
PROTOBUF_CONSTEXPR C_Move::C_Move(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MoveDefaultTypeInternal() {}
  union {
    C_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MoveDefaultTypeInternal _C_Move_default_instance_;
PROTOBUF_CONSTEXPR S_Move::S_Move(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MoveDefaultTypeInternal() {}
  union {
    S_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MoveDefaultTypeInternal _S_Move_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Ping, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Enter, _impl_.enter_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _impl_.enter_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Enter, _impl_.player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Exit, _impl_.enter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Exit, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Exit, _impl_.enter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Spawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Spawn, _impl_.player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Despawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Despawn, _impl_.player_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Move, _impl_.player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Move, _impl_.player_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Ping)},
  { 7, -1, -1, sizeof(::Protocol::C_Enter)},
  { 14, -1, -1, sizeof(::Protocol::S_Enter)},
  { 23, -1, -1, sizeof(::Protocol::C_Exit)},
  { 30, -1, -1, sizeof(::Protocol::S_Exit)},
  { 38, -1, -1, sizeof(::Protocol::S_Spawn)},
  { 45, -1, -1, sizeof(::Protocol::S_Despawn)},
  { 52, -1, -1, sizeof(::Protocol::C_Move)},
  { 59, -1, -1, sizeof(::Protocol::S_Move)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Ping_default_instance_._instance,
  &::Protocol::_C_Enter_default_instance_._instance,
  &::Protocol::_S_Enter_default_instance_._instance,
  &::Protocol::_C_Exit_default_instance_._instance,
  &::Protocol::_S_Exit_default_instance_._instance,
  &::Protocol::_S_Spawn_default_instance_._instance,
  &::Protocol::_S_Despawn_default_instance_._instance,
  &::Protocol::_C_Move_default_instance_._instance,
  &::Protocol::_S_Move_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\014Struct.proto"
  "\"\023\n\004Ping\022\013\n\003msg\030\001 \001(\t\"\034\n\007C_Enter\022\021\n\tente"
  "r_key\030\001 \001(\t\"V\n\007S_Enter\022\016\n\006result\030\001 \001(\010\022\020"
  "\n\010enter_id\030\002 \001(\r\022)\n\013player_info\030\003 \001(\0132\024."
  "Protocol.PlayerInfo\"\032\n\006C_Exit\022\020\n\010enter_i"
  "d\030\001 \001(\r\"*\n\006S_Exit\022\016\n\006result\030\001 \001(\010\022\020\n\010ent"
  "er_id\030\002 \001(\r\"5\n\007S_Spawn\022*\n\014player_infos\030\001"
  " \003(\0132\024.Protocol.PlayerInfo\"\037\n\tS_Despawn\022"
  "\022\n\nplayer_ids\030\001 \003(\r\"3\n\006C_Move\022)\n\013player_"
  "info\030\001 \001(\0132\024.Protocol.PlayerInfo\"3\n\006S_Mo"
  "ve\022)\n\013player_info\030\001 \001(\0132\024.Protocol.Playe"
  "rInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[1] = {
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 453, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Protocol.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.Ping.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.Ping.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class C_Enter::_Internal {
 public:
};

C_Enter::C_Enter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Enter)
}
C_Enter::C_Enter(const C_Enter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Enter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enter_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enter_key().empty()) {
    _this->_impl_.enter_key_.Set(from._internal_enter_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Enter)
}

inline void C_Enter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.enter_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Enter::~C_Enter() {
  // @@protoc_insertion_point(destructor:Protocol.C_Enter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Enter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enter_key_.Destroy();
}

void C_Enter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Enter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Enter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enter_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Enter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string enter_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_enter_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_Enter.enter_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Enter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Enter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string enter_key = 1;
  if (!this->_internal_enter_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enter_key().data(), static_cast<int>(this->_internal_enter_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_Enter.enter_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enter_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Enter)
  return target;
}

size_t C_Enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Enter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enter_key = 1;
  if (!this->_internal_enter_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enter_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Enter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Enter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Enter::GetClassData() const { return &_class_data_; }


void C_Enter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Enter*>(&to_msg);
  auto& from = static_cast<const C_Enter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Enter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enter_key().empty()) {
    _this->_internal_set_enter_key(from._internal_enter_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Enter::CopyFrom(const C_Enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Enter::IsInitialized() const {
  return true;
}

void C_Enter::InternalSwap(C_Enter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enter_key_, lhs_arena,
      &other->_impl_.enter_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Enter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_Enter::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player_info(const S_Enter* msg);
};

const ::Protocol::PlayerInfo&
S_Enter::_Internal::player_info(const S_Enter* msg) {
  return *msg->_impl_.player_info_;
}
void S_Enter::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
}
S_Enter::S_Enter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Enter)
}
S_Enter::S_Enter(const S_Enter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Enter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.result_){}
    , decltype(_impl_.enter_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::Protocol::PlayerInfo(*from._impl_.player_info_);
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enter_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.enter_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Enter)
}

inline void S_Enter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.enter_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Enter::~S_Enter() {
  // @@protoc_insertion_point(destructor:Protocol.S_Enter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Enter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_info_;
}

void S_Enter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Enter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Enter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enter_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.enter_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Enter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerInfo player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Enter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Enter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // uint32 enter_id = 2;
  if (this->_internal_enter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enter_id(), target);
  }

  // .Protocol.PlayerInfo player_info = 3;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Enter)
  return target;
}

size_t S_Enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Enter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player_info = 3;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // uint32 enter_id = 2;
  if (this->_internal_enter_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Enter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Enter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Enter::GetClassData() const { return &_class_data_; }


void S_Enter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Enter*>(&to_msg);
  auto& from = static_cast<const S_Enter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Enter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_enter_id() != 0) {
    _this->_internal_set_enter_id(from._internal_enter_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Enter::CopyFrom(const S_Enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Enter::IsInitialized() const {
  return true;
}

void S_Enter::InternalSwap(S_Enter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Enter, _impl_.enter_id_)
      + sizeof(S_Enter::_impl_.enter_id_)
      - PROTOBUF_FIELD_OFFSET(S_Enter, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Enter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C_Exit::_Internal {
 public:
};

C_Exit::C_Exit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Exit)
}
C_Exit::C_Exit(const C_Exit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Exit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enter_id_ = from._impl_.enter_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Exit)
}

inline void C_Exit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_Exit::~C_Exit() {
  // @@protoc_insertion_point(destructor:Protocol.C_Exit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Exit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Exit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Exit::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Exit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enter_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Exit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 enter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Exit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Exit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 enter_id = 1;
  if (this->_internal_enter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enter_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Exit)
  return target;
}

size_t C_Exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Exit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 enter_id = 1;
  if (this->_internal_enter_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Exit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Exit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Exit::GetClassData() const { return &_class_data_; }


void C_Exit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Exit*>(&to_msg);
  auto& from = static_cast<const C_Exit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Exit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enter_id() != 0) {
    _this->_internal_set_enter_id(from._internal_enter_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Exit::CopyFrom(const C_Exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Exit::IsInitialized() const {
  return true;
}

void C_Exit::InternalSwap(C_Exit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enter_id_, other->_impl_.enter_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Exit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_Exit::_Internal {
 public:
};

S_Exit::S_Exit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Exit)
}
S_Exit::S_Exit(const S_Exit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Exit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.enter_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enter_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.enter_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Exit)
}

inline void S_Exit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , decltype(_impl_.enter_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Exit::~S_Exit() {
  // @@protoc_insertion_point(destructor:Protocol.S_Exit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Exit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Exit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Exit::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Exit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enter_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.enter_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Exit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Exit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Exit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // uint32 enter_id = 2;
  if (this->_internal_enter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enter_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Exit)
  return target;
}

size_t S_Exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Exit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // uint32 enter_id = 2;
  if (this->_internal_enter_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Exit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Exit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Exit::GetClassData() const { return &_class_data_; }


void S_Exit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Exit*>(&to_msg);
  auto& from = static_cast<const S_Exit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Exit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_enter_id() != 0) {
    _this->_internal_set_enter_id(from._internal_enter_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Exit::CopyFrom(const S_Exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Exit::IsInitialized() const {
  return true;
}

void S_Exit::InternalSwap(S_Exit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Exit, _impl_.enter_id_)
      + sizeof(S_Exit::_impl_.enter_id_)
      - PROTOBUF_FIELD_OFFSET(S_Exit, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Exit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_Spawn::_Internal {
 public:
};

void S_Spawn::clear_player_infos() {
  _impl_.player_infos_.Clear();
}
S_Spawn::S_Spawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Spawn)
}
S_Spawn::S_Spawn(const S_Spawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Spawn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_infos_){from._impl_.player_infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Spawn)
}

inline void S_Spawn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Spawn::~S_Spawn() {
  // @@protoc_insertion_point(destructor:Protocol.S_Spawn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Spawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_infos_.~RepeatedPtrField();
}

void S_Spawn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Spawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Spawn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PlayerInfo player_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Spawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Spawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo player_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Spawn)
  return target;
}

size_t S_Spawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Spawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo player_infos = 1;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->_impl_.player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Spawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Spawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Spawn::GetClassData() const { return &_class_data_; }


void S_Spawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Spawn*>(&to_msg);
  auto& from = static_cast<const S_Spawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Spawn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_infos_.MergeFrom(from._impl_.player_infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Spawn::CopyFrom(const S_Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Spawn::IsInitialized() const {
  return true;
}

void S_Spawn::InternalSwap(S_Spawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_infos_.InternalSwap(&other->_impl_.player_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Spawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_Despawn::_Internal {
 public:
};

S_Despawn::S_Despawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Despawn)
}
S_Despawn::S_Despawn(const S_Despawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Despawn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){from._impl_.player_ids_}
    , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Despawn)
}

inline void S_Despawn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){arena}
    , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Despawn::~S_Despawn() {
  // @@protoc_insertion_point(destructor:Protocol.S_Despawn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Despawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_ids_.~RepeatedField();
}

void S_Despawn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Despawn::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Despawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Despawn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 player_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Despawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Despawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_ids = 1;
  {
    int byte_size = _impl_._player_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_player_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Despawn)
  return target;
}

size_t S_Despawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Despawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.player_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._player_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Despawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Despawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Despawn::GetClassData() const { return &_class_data_; }


void S_Despawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Despawn*>(&to_msg);
  auto& from = static_cast<const S_Despawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Despawn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_ids_.MergeFrom(from._impl_.player_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Despawn::CopyFrom(const S_Despawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Despawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Despawn::IsInitialized() const {
  return true;
}

void S_Despawn::InternalSwap(S_Despawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_ids_.InternalSwap(&other->_impl_.player_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Despawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class C_Move::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player_info(const C_Move* msg);
};

const ::Protocol::PlayerInfo&
C_Move::_Internal::player_info(const C_Move* msg) {
  return *msg->_impl_.player_info_;
}
void C_Move::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
}
C_Move::C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Move)
}
C_Move::C_Move(const C_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Move* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::Protocol::PlayerInfo(*from._impl_.player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Move)
}

inline void C_Move::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_Move::~C_Move() {
  // @@protoc_insertion_point(destructor:Protocol.C_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_info_;
}

void C_Move::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player_info = 1;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Move)
  return target;
}

size_t C_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player_info = 1;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Move::GetClassData() const { return &_class_data_; }


void C_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Move*>(&to_msg);
  auto& from = static_cast<const C_Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Move)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Move::CopyFrom(const C_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Move::IsInitialized() const {
  return true;
}

void C_Move::InternalSwap(C_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_info_, other->_impl_.player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_Move::_Internal {
 public:
  static const ::Protocol::PlayerInfo& player_info(const S_Move* msg);
};

const ::Protocol::PlayerInfo&
S_Move::_Internal::player_info(const S_Move* msg) {
  return *msg->_impl_.player_info_;
}
void S_Move::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
}
S_Move::S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Move)
}
S_Move::S_Move(const S_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Move* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::Protocol::PlayerInfo(*from._impl_.player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Move)
}

inline void S_Move::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_Move::~S_Move() {
  // @@protoc_insertion_point(destructor:Protocol.S_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_info_;
}

void S_Move::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player_info = 1;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Move)
  return target;
}

size_t S_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PlayerInfo player_info = 1;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Move::GetClassData() const { return &_class_data_; }


void S_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Move*>(&to_msg);
  auto& from = static_cast<const S_Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Move)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::Protocol::PlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Move::CopyFrom(const S_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Move::IsInitialized() const {
  return true;
}

void S_Move::InternalSwap(S_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_info_, other->_impl_.player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Ping*
Arena::CreateMaybeMessage< ::Protocol::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Enter*
Arena::CreateMaybeMessage< ::Protocol::C_Enter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Enter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Enter*
Arena::CreateMaybeMessage< ::Protocol::S_Enter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Enter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Exit*
Arena::CreateMaybeMessage< ::Protocol::C_Exit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Exit >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Exit*
Arena::CreateMaybeMessage< ::Protocol::S_Exit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Exit >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Spawn*
Arena::CreateMaybeMessage< ::Protocol::S_Spawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Spawn >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Despawn*
Arena::CreateMaybeMessage< ::Protocol::S_Despawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Despawn >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Move*
Arena::CreateMaybeMessage< ::Protocol::C_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Move*
Arena::CreateMaybeMessage< ::Protocol::S_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Move >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
